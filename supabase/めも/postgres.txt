PostgreSQL関数の役割別まとめ

  🎯 推薦システム関数

  主要推薦戦略

  - get_adaptive_strategy - ユーザー行動量に応じた適応型推薦
  - get_personalized_strategy - 協調フィルタリング + 嗜好分析
  - get_popular_strategy - 人気作品ベース推薦
  - get_personalized_recommendations - メイン個人化推薦関数
  - get_personalized_recommendations_with_embeddings - セマンティック推薦

  類似性分析

  - find_similar_users - 類似ユーザー発見（協調フィルタリング用）
  - find_similar_works_by_content - コンテンツベース類似作品検索
  - get_similar_works_by_content - 作品詳細ページ用類似作品
  - get_hybrid_recommendations - ユーザー＋コンテンツハイブリッド推薦

  推薦システム管理

  - refresh_recommendation_cache - 推薦キャッシュ更新
  - cron_refresh_recommendations - 定期推薦更新
  - get_recommendation_stats - 推薦システム統計情報

  📊 統計・集計関数

  カウント自動更新

  - update_work_likes_count - いいね数自動更新
  - update_work_comments_count - コメント数自動更新
  - update_work_views_count - 閲覧数自動更新
  - update_follow_counts - フォロー数自動更新
  - update_user_works_count - ユーザー作品数自動更新

  統計計算

  - calculate_bayesian_score - ベイジアン評価スコア計算
  - update_work_statistics - 作品統計データ更新
  - update_work_stats - 作品統計トリガー
  - update_user_stats_from_works - ユーザー統計更新

  トレンド分析

  - update_work_trend_score_on_likes - いいね変動によるトレンドスコア更新
  - calculate_engagement_score_trigger - エンゲージメントスコア計算

  🔍 検索・発見機能

  検索機能

  - search_works_by_embedding - ベクトル埋め込み検索
  - get_valid_recommendations - 有効な推薦作品取得

  フォールバック

  - get_popular_works_fallback - 推薦失敗時の人気作品表示
  - get_simple_personalized - シンプル個人化推薦
  - get_simple_popular - シンプル人気作品推薦

  🤖 AI・機械学習関数

  埋め込み処理

  - auto_queue_embedding - 埋め込み処理自動キューイング
  - trigger_embedding_processing - 埋め込み処理トリガー
  - trigger_embedding_processing_secure - セキュア埋め込み処理

  キャッシュ管理

  - get_user_preferences_cache - ユーザー嗜好キャッシュ
  - update_daily_embedding_cost - AI処理コスト管理

  👥 ソーシャル機能

  フォロー機能

  - approve_follow_request - フォローリクエスト承認
  - reject_follow_request - フォローリクエスト拒否
  - get_follow_status - フォロー状態取得
  - notify_followers_of_new_work - 新作品フォロワー通知

  権限管理

  - can_view_user_works - ユーザー作品閲覧権限チェック

  📢 通知システム

  通知管理

  - create_notification - 通知作成
  - clear_test_notifications - テスト通知削除

  🔧 システム管理

  定期処理

  - auto_publish_scheduled_works - 予約投稿自動公開
  - cleanup_old_cron_logs - 古いログ削除

  デバッグ・監視

  - debug_http_request - HTTPリクエストデバッグ
  - debug_vault_key - Vault設定デバッグ
  - get_cron_stats - Cron統計情報

  🛠️ ユーティリティ

  汎用機能

  - generate_readable_id - 読みやすいID生成
  - set_updated_at - 更新日時設定
  - update_updated_at_column - 汎用更新日時トリガー

  閲覧数管理

  - increment_views_uuid - 閲覧数増加（UUID版）
  - increment_work_views - 作品閲覧数増加

  各種更新トリガー

  - update_bookmarks_updated_at - ブックマーク更新日時
  - update_reading_progress_updated_at - 読書進捗更新日時
  - update_user_preferences_updated_at - 嗜好設定更新日時

  ---
  特徴：
  - 推薦システムが非常に充実（10個以上の関数）
  - 自動集計でデータ整合性を保証
  - AI機能（埋め込み、セマンティック検索）を積極活用
  - ソーシャル機能も本格的に実装
  - 監視・デバッグ機能も完備

  これは中小規模のWebサービスとしてはかなり本格的なDB設計になっています。





● 無駄っぽいPostgreSQL関数の分析

  🚨 確実に削除可能

  1. デバッグ関数 (本番環境では不要)

  - debug_http_request - HTTPリクエストデバッグ用
  - debug_vault_key - Vault設定デバッグ用
  - clear_test_notifications - テスト通知削除

  2. 重複・冗長な閲覧数関数

  - increment_views_uuid vs increment_work_views
    - 同じ機能で引数名が違うだけ
    - どちらか一つに統一可能

  ⚠️ 削除検討候補

  3. 推薦システムの重複

  Simple版が多すぎる:
  - get_simple_personalized - メイン推薦システムと重複
  - get_simple_popular - 人気作品推薦と重複
  - get_popular_works_fallback - フォールバック用だが使われていない可能性

  使用状況を調査して削除検討

  4. 未使用の可能性が高い機能

  - find_similar_users - 類似ユーザー発見（評価機能が未実装？）
  - find_similar_works_by_content vs get_similar_works_by_content
    - 機能が重複、どちらか削除可能

  5. 過剰なトリガー関数

  - trigger_update_likes
  - trigger_update_reviews
    - 実際のトリガーではupdate_work_*_countを直接呼んでいる
    - 中間関数として不要

  📊 保留（要調査）

  6. 管理機能（使用頻度次第）

  - manual_refresh_recommendations - 手動推薦更新
  - get_cron_stats - Cron統計
  - cleanup_old_cron_logs - ログクリーンアップ

  → 管理画面で使われているなら必要

  7. 埋め込み関連

  - trigger_embedding_processing vs trigger_embedding_processing_secure
    - セキュア版があるなら通常版は不要？

  🎯 削除の優先順位

  高優先度（即削除可能）

  -- デバッグ関数
  DROP FUNCTION debug_http_request();
  DROP FUNCTION debug_vault_key();
  DROP FUNCTION clear_test_notifications();

  -- 重複閲覧数関数（どちらか片方）
  DROP FUNCTION increment_views_uuid(uuid);
  -- または
  -- DROP FUNCTION increment_work_views(uuid);

  中優先度（使用状況調査後）

  - Simple版推薦関数群
  - 重複類似作品検索関数
  - 未使用トリガー関数

  低優先度（管理機能として保持）

  - Cron管理関数
  - 手動リフレッシュ関数

  推定削除効果: 関数数を15-20個程度削減可能、DB保守性向上